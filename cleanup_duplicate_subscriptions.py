#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤.
–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –û–î–ò–ù —Å–∞–º—ã–π –Ω–æ–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç.
"""
import asyncio
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from app.models.subscription import Subscription
from app.models.student import Student
import os

DATABASE_URL = os.getenv("DATABASE_URL", "postgresql+asyncpg://sambo_user:sambo_password@db:5432/sambo_academy")


async def cleanup_duplicate_subscriptions():
    """–û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤."""
    engine = create_async_engine(DATABASE_URL, echo=True)
    async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
    
    async with async_session() as session:
        print("\n" + "="*60)
        print("–û–ß–ò–°–¢–ö–ê –î–£–ë–õ–ò–†–£–Æ–©–ò–•–°–Ø –ê–ö–¢–ò–í–ù–´–• –ê–ë–û–ù–ï–ú–ï–ù–¢–û–í")
        print("="*60 + "\n")
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        students_result = await session.execute(select(Student))
        students = students_result.scalars().all()
        
        total_deactivated = 0
        students_with_duplicates = 0
        
        for student in students:
            # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞
            active_subs_result = await session.execute(
                select(Subscription)
                .where(
                    Subscription.student_id == student.id,
                    Subscription.is_active == True
                )
                .order_by(Subscription.start_date.desc())
            )
            active_subs = active_subs_result.scalars().all()
            
            if len(active_subs) > 1:
                students_with_duplicates += 1
                print(f"\nüë§ –°—Ç—É–¥–µ–Ω—Ç: {student.full_name}")
                print(f"   üìä –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: {len(active_subs)}")
                
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π (—Å–∞–º—ã–π –Ω–æ–≤—ã–π)
                newest_sub = active_subs[0]
                print(f"   ‚úÖ –û—Å—Ç–∞–≤–ª—è–µ–º: {newest_sub.subscription_type.value} (–Ω–∞—á–∞–ª–æ: {newest_sub.start_date})")
                
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                for old_sub in active_subs[1:]:
                    print(f"   ‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º: {old_sub.subscription_type.value} (–Ω–∞—á–∞–ª–æ: {old_sub.start_date})")
                    old_sub.is_active = False
                    total_deactivated += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await session.commit()
        
        print("\n" + "="*60)
        print("–ò–¢–û–ì–ò –û–ß–ò–°–¢–ö–ò")
        print("="*60)
        print(f"–í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(students)}")
        print(f"–°—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏: {students_with_duplicates}")
        print(f"–ê–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {total_deactivated}")
        print("="*60 + "\n")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        check_result = await session.execute(
            select(Student.id, func.count(Subscription.id))
            .join(Subscription, Subscription.student_id == Student.id)
            .where(Subscription.is_active == True)
            .group_by(Student.id)
            .having(func.count(Subscription.id) > 1)
        )
        remaining_duplicates = check_result.all()
        
        if remaining_duplicates:
            print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û—Å—Ç–∞–ª–æ—Å—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏: {len(remaining_duplicates)}")
        else:
            print("‚úÖ –£–°–ü–ï–®–ù–û: –£ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Ç–µ–ø–µ—Ä—å –ø–æ 1 –∞–∫—Ç–∏–≤–Ω–æ–º—É –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É!")
    
    await engine.dispose()


if __name__ == "__main__":
    print("\nüöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –æ—á–∏—Å—Ç–∫–∏...\n")
    asyncio.run(cleanup_duplicate_subscriptions())
    print("\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n")
